#include "Dictionary ADT.h"
#include "BinaryTree Node.h"

template <typename Key, typename E>
class BST : public Dictionary<Key, E> {
private:
	BSTNode<Key, E>* root;
	int nodecount;

	BSTNode<Key, E>* deleteMin(BSTNode<Key, E>*);
	
	BSTNode<Key, E>* getMin(BSTNode<Key, E>*);


	E findHelp(BSTNode<Key, E>*, const Key&) const;
	BSTNode<Key, E>* insertHelp(BSTNode<Key, E>*, const Key&, const E&);
	BSTNode<Key, E>* removeHelp(BSTNode<Key, E>*, const Key&);
	void clearHelp(BSTNode<Key, E>*);
	void printHelp(BSTNode<Key, E>*, int) const;

public:
	BST();
	~BST();

	void clear();
	
	void insert(const Key& k, const E& e);

	E remove(const Key& k);
	E removeAny();

	E find(const Key& k) const;

	int size();

	void print() const;
};

template <typename Key, typename E>
BST<Key, E>::BST() {
	root = NULL;
	nodecount = 0;
}

template <typename Key, typename E>
BST<Key, E>::~BST() {
	clearHelp(root);
}

template <typename Key, typename E>
void BST<Key, E>::clear() {
	clearHelp(root);
	root = NULL;
	nodecount = 0;
}

template <typename Key, typename E>
void BST<Key, E>::insert(const Key& k, const E& e) {
	root = insertHelp(root, k, e);
	++nodecount;
}

template <typename Key, typename E>
E BST<Key, E>::remove(const Key& k) {
	E temp = findHelp(root, k);               //在removehelp中释放了内存，此处返回的是系统栈内存
	if (temp != NULL) {
		root = removeHelp(root, k);       //removehelp返回的是rt，因为最后一次出栈的是root，因为root可能改变，此句一举两得
		--nodecount;
	}
	return temp;
}

template <typename Key, typename E>
E BST<Key, E>::removeAny() {
	if (root != NULL) {
		E temp = root->element();
		root = removeHelp(root, root->key());
		--nodecount;
		return temp;
	}
	else
		return NULL;
}

template <typename Key, typename E>
E BST<Key, E>::find(const Key& k) const {
	return findHelp(root, k);
}

template <typename Key, typename E>
int BST<Key, E>::size() {
	return nodecount;
}

template <typename Key, typename E>
void BST<Key, E>::print() const {
	if (root == NULL)
		std::cout << "The BST is empty.\n";
	else
		printHelp(root, 0);
}

template <typename Key, typename E>
E BST<Key, E>::findHelp(BSTNode<Key, E>* root, const Key& k) const {
	if (root == NULL)
		return NULL;
	if (k < root->key())
		return findHelp(root->left(), k);
	else if (k > root->key())
		return findHelp(root->right(), k);
	else
		return root->element();                             
}

template <typename Key, typename E>
BSTNode<Key, E>* BST<Key, E>::insertHelp(BSTNode<Key, E>* root, const Key& k, const E& it) {
	if (root == NULL)
		return new BSTNode<Key, E>(k, it, NULL, NULL);      
	if (k < root->key())
		root->setLeft(insertHelp(root->left(), k, it));
	else
		root->setRight(insertHelp(root->right(), k, it));
	return root;
}

template <typename Key, typename E>
BSTNode<Key, E>* BST<Key, E>::deleteMin(BSTNode<Key, E>* rt) {
	if (rt->left() == NULL)
		return rt->right();
	else { //此处应有删除
		rt->setLeft(deleteMin(rt->left()));
		return rt;
	}
}

template <typename Key, typename E>
BSTNode<Key, E>* BST<Key, E>::getMin(BSTNode<Key, E>* rt) {
	if (rt->left() == NULL)
		return rt;
	else
		return getMin(rt->left());
}

template <typename Key, typename E>
BSTNode<Key, E>* BST<Key, E>::removeHelp(BSTNode<Key, E>* rt, const Key& k) {
	if (rt == NULL)
		return NULL;
	else if (k < rt->key())
		rt->setLeft(removeHelp(rt->left(), k));
	else if( k > rt->key())
		rt->setRight(removeHelp(rt->right(), k));       //以上是对k结点的查找
	else {
		BSTNode<Key, E>* temp = rt;

		if (rt->left() == NULL) {
			rt = rt->right();                           //左结点为空，直接用右结点去覆盖
			delete temp;                                //因为要手动释放内存，所以不能直接return
		}
		else if (rt->right() == NULL) {                 //右结点为空，直接用左结点去覆盖
			rt = rt->left();                         //因为要手动释放内存，所以不能直接return
			delete temp;
		}
		else {
			BSTNode<Key, E>* temporary = getMin(rt->right());
			rt->setElement(temporary->element());
			rt->setKey(temporary->key());
			rt->setRight(deleteMin(rt->right()));
			delete temporary;
		}
	}
	return rt;                                           //因为要手动释放内存，所以不能直接return
}

template <typename Key,typename E>
void BST<Key, E>::clearHelp(BSTNode<Key, E>* root) {
	if (root == NULL)
		return;                                         //直到leaf才返回
	clearHelp(root->left());
	clearHelp(root->right());
	delete root;
}

template <typename Key, typename E>
void BST<Key, E>::printHelp(BSTNode<Key, E>* root, int level) const {
	if (root == NULL)
		return;
	printHelp(root->left(), level + 1);
	for (int i = 0; i < level; ++i)
		std::cout << ' ';

	std::cout << root->key() << '\n';
	printHelp(root->right(), level + 1);
}
