#include "BinaryTree Node ADT.h"

template <typename Key, typename E>
class BSTNode : public BinNode<E> {

private:
	Key k;
	E it;
	BSTNode* lc;
	BSTNode* rc;

public:
	BSTNode();
	BSTNode(Key K, E e, BSTNode* l = NULL, BSTNode* r = NULL);
	~BSTNode();

	E& element();
	void setElement(const E& e);

	Key& key();
	void setKey(const Key& k);

	BSTNode* left() const;
    BSTNode* right() const;

	void setLeft(BinNode<E> *b);
	void setRight(BinNode<E>* b);

	bool isLeaf();
};

template <typename Key, typename E>
BSTNode<Key, E>::BSTNode() {
	lc = NULL;
	rc = NULL;
}

template <typename Key, typename E>
BSTNode<Key, E>::BSTNode(Key K, E e, BSTNode* l, BSTNode* r) {
	k = K;
	it = e;
	lc = l;
	rc = r;
}

template <typename Key, typename E>
BSTNode<Key, E>::~BSTNode() {

}

template <typename Key, typename E>
E& BSTNode<Key, E>::element() {
	return it;
}

template <typename Key, typename E>
void BSTNode<Key, E>::setElement(const E& e) {
	it = e;
}

template <typename Key, typename E>
Key& BSTNode<Key, E>::key() {
	return k;
}

template <typename Key, typename E>
void BSTNode<Key, E>::setKey(const Key& K) {
	k = K;
}

template <typename Key, typename E>
BSTNode<Key, E>* BSTNode<Key, E>::left() const {
	return lc;
}

template <typename Key, typename E>
BSTNode<Key, E>* BSTNode<Key, E>::right() const {
	return rc;
}

template <typename Key, typename E>
void BSTNode<Key, E>::setLeft(BinNode<E>* b) {
	lc = (BSTNode*)b;
}

template <typename Key, typename E>
void BSTNode<Key, E>::setRight(BinNode<E>* b) {
	rc = (BSTNode*)b;
}

template <typename Key, typename E>
bool BSTNode<Key, E>::isLeaf() {
	return (lc == NULL) && (rc == NULL);
}


